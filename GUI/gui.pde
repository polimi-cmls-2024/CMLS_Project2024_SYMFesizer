/*
  This folder is auto-generated by  the "G4P" library, that we
  use in order to simplify the creation of the big amount of knobs we need, 
  giving that library the possibility to create them by a graphical way.
  
  We implement inside the generated functions the OSC messages' generation and 
  sending parts.
  

/* 
 Here the library is generating the events that are triggered when knobs are turned on the GUI,
 and we are adding to every event the creation of an OSC message that is sent to our address and 
 then sent to Supercollider. In this way, dealing with separate events(and so separate message), 
 we have the possibility to modify one parametres at time, getting a "lighter" and smarter 
 comunication part.
 */


public void panel4_Click1(GPanel source, GEvent event) { //_CODE_:Tastiera:351442:
  println("Tastiera - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:Tastiera:351442:

public void panel5_Click1(GPanel source, GEvent event) { //_CODE_:panel5:288106:
  println("panel5 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:panel5:288106:


public void knob1_turn1(GKnob source, GEvent event) { //_CODE_:RoomSize:470493:
  
  ratep = source.getValueF();
  println("RoomSize - GKnob >> GEvent." + event + " @ " + millis());
  
    //Generation of the OSC messages
    
    OscMessage Ratep = new OscMessage("/phaser/rate");   //creating the Message
    Ratep.add(ratep);                                    //adding the parametres to the message
    oscP5.send(Ratep, myRemoteLocation);                 //sending the message to the address
    println(Ratep.typetag());                            //returning the type of the value in the post windown to check if the message is sent correctly
    
} //_CODE_:RoomSize:470493:

public void knob1_turn2(GKnob source, GEvent event) { //_CODE_:Damping:405690:
  
  depthp = source.getValueF();
  println("Damping - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Depthp = new OscMessage("/phaser/depth");
  Depthp.add(depthp);
  oscP5.send(Depthp, myRemoteLocation);
  println(Depthp.typetag());
  
} //_CODE_:Damping:405690:

public void knob1_turn3(GKnob source, GEvent event) { //_CODE_:WetLevel:519704:
  
  cfreq = source.getValueF();
  println("WetLevel - GKnob >> GEvent." + event + " @ " + millis());
 
  OscMessage CFreq = new OscMessage("/phaser/centreFrequency");
  CFreq.add(cfreq);
  oscP5.send(CFreq, myRemoteLocation);
  println(CFreq.typetag());
  
} //_CODE_:WetLevel:519704:

public void knob1_turn4(GKnob source, GEvent event) { //_CODE_:DryLevel:635245:
  
  feedbackp = source.getValueF();
  println("DryLevel - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage FeedBackp = new OscMessage("/phaser/feedback");
  FeedBackp.add(feedbackp);
  oscP5.send(FeedBackp, myRemoteLocation);
  println(FeedBackp.typetag());
  
} //_CODE_:DryLevel:635245:

public void knob1_turn5(GKnob source, GEvent event) { //_CODE_:Width:637602:
 
  mixp = source.getValueF();
  println("Width - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Mixp = new OscMessage("/phaser/mix");
  Mixp.add(mixp);
  oscP5.send(Mixp, myRemoteLocation);
  println(Mixp.typetag());
  
} //_CODE_:Width:637602:


public void knob1_turn6(GKnob source, GEvent event) { //_CODE_:FreezeMode:816151:
  //
  println("FreezeMode - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:FreezeMode:816151:

public void panel6_Click1(GPanel source, GEvent event) { //_CODE_:panel6:423167:
  println("panel6 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:panel6:423167:


public void knob1_turn7(GKnob source, GEvent event) { //_CODE_:Rate:398254:
  
  rate = source.getValueF();    
  println("Rate - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Rate = new OscMessage("/chorus/rate");
  Rate.add(rate);
  oscP5.send(Rate, myRemoteLocation);
  println(Rate.typetag());
  
} //_CODE_:Rate:398254:

public void knob1_turn8(GKnob source, GEvent event) { //_CODE_:Depth:235731:
  
  depth = source.getValueF();
  println("Depth - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Depth = new OscMessage("/chorus/depth");
  Depth.add(depth);
  oscP5.send(Depth, myRemoteLocation);
  println(Depth.typetag());
  
} //_CODE_:Depth:235731:

public void knob1_turn9(GKnob source, GEvent event) { //_CODE_:CentreDelay:592139:
  
  cdelay = source.getValueF();
  println("CentreDelay - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage CDelay = new OscMessage("/chorus/centreDelay");
  CDelay.add(cdelay);
  oscP5.send(CDelay, myRemoteLocation);
  println(CDelay.typetag());
  
} //_CODE_:CentreDelay:592139:

public void knob1_turn10(GKnob source, GEvent event) { //_CODE_:Feedback:963858:
  
  feedback = source.getValueF();
  println("Feedback - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Feedback = new OscMessage("/chorus/feedback");
  Feedback.add(feedback);
  oscP5.send(Feedback, myRemoteLocation);
  println(Feedback.typetag());
  
} //_CODE_:Feedback:963858:

public void knob1_turn11(GKnob source, GEvent event) { //_CODE_:Mix:513886:
  
  mix = source.getValueF();
  println("Mix - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Mix = new OscMessage("/chorus/mix");
  Mix.add(mix);
  oscP5.send(Mix, myRemoteLocation);
  println(Mix.typetag());
  
} //_CODE_:Mix:513886:


public void panel7_Click1(GPanel source, GEvent event) { //_CODE_:panel7:979017:
  println("panel7 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:panel7:979017:


public void knob1_turn12(GKnob source, GEvent event) { //_CODE_:Threshold:978126:
  
  threshold = source.getValueF();
  println("Threshold - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Threshold = new OscMessage("/compressor/threshold");
  Threshold.add(threshold);
  oscP5.send(Threshold, myRemoteLocation);
  println(Threshold.typetag());
  
  } //_CODE_:Threshold:978126:

public void knob1_turn13(GKnob source, GEvent event) { //_CODE_:Ratio:569382:
 
  ratio = source.getValueF();
  println("Ratio - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Ratio = new OscMessage("/compressor/ratio");
  Ratio.add(ratio);
  oscP5.send(Ratio, myRemoteLocation);
  println(Ratio.typetag());
  
} //_CODE_:Ratio:569382:

public void knob1_turn14(GKnob source, GEvent event) { //_CODE_:Attack:570913:
  
  attack = source.getValueF();
  println("Attack - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Attack = new OscMessage("/compressor/attack");
  Attack.add(attack);
  oscP5.send(Attack, myRemoteLocation);
  println(Attack.typetag());
  
} //_CODE_:Attack:570913:

public void knob1_turn15(GKnob source, GEvent event) { //_CODE_:Release:352921:
  
  release = source.getValueF();
  println("Release - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Release = new OscMessage("/compressor/release");
  Release.add(release);
  oscP5.send(Release, myRemoteLocation);
  println(Release.typetag());
  
} //_CODE_:Release:352921:

public void knob1_turn16(GKnob source, GEvent event) { //_CODE_:Pan:656396:
 
  pan = source.getValueF();
  println("Pan - GKnob >> GEvent." + event + " @ " + millis());
  
  OscMessage Pan = new OscMessage("/panner/value");
  Pan.add(pan);
  oscP5.send(Pan, myRemoteLocation);
  println(Pan.typetag());
  
} //_CODE_:Pan:656396:


//---------------------------------------------------------------------------------------------------------------------------

//the library is generating all the GUI controls

public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("AirGuitar - by SYMFesizer");
  
  Tastiera = new GPanel(this, 19, 19, 1000, 340, "Tab bar text");
  Tastiera.setCollapsible(false);
  Tastiera.setText("Tab bar text");
  Tastiera.setOpaque(false);
  Tastiera.addEventHandler(this, "panel4_Click1");
  
  panel5 = new GPanel(this, 21, 385, 540, 109, "Phaser");
  panel5.setCollapsible(false);
  panel5.setDraggable(false);
  panel5.setText("Phaser");
  panel5.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panel5.setOpaque(true);
  panel5.addEventHandler(this, "panel5_Click1");
  
  RoomSize = new GKnob(this, 20, 25, 79, 74, 0.8);
  RoomSize.setTurnRange(110, 70);
  RoomSize.setTurnMode(GKnob.CTRL_HORIZONTAL);
  RoomSize.setSensitivity(1);
  RoomSize.setShowArcOnly(false);
  RoomSize.setOverArcOnly(false);
  RoomSize.setIncludeOverBezel(false);
  RoomSize.setShowTrack(true);
  RoomSize.setLimits(0.25, 0.0, 1.0);
  RoomSize.setNbrTicks(5);
  RoomSize.setShowTicks(true);
  RoomSize.setOpaque(false);
  RoomSize.addEventHandler(this, "knob1_turn1");
  
  Damping = new GKnob(this, 129, 26, 77, 72, 0.8);
  Damping.setTurnRange(110, 70);
  Damping.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Damping.setSensitivity(1);
  Damping.setShowArcOnly(false);
  Damping.setOverArcOnly(false);
  Damping.setIncludeOverBezel(false);
  Damping.setShowTrack(true);
  Damping.setLimits(0.5, 0.0, 1.0);
  Damping.setNbrTicks(5);
  Damping.setShowTicks(true);
  Damping.setOpaque(false);
  Damping.addEventHandler(this, "knob1_turn2");
  
  WetLevel = new GKnob(this, 235, 26, 80, 73, 0.8);
  WetLevel.setTurnRange(110, 70);
  WetLevel.setTurnMode(GKnob.CTRL_HORIZONTAL);
  WetLevel.setSensitivity(1);
  WetLevel.setShowArcOnly(false);
  WetLevel.setOverArcOnly(false);
  WetLevel.setIncludeOverBezel(false);
  WetLevel.setShowTrack(true);
  WetLevel.setLimits(0.5, 0.0, 1.0);
  WetLevel.setNbrTicks(5);
  WetLevel.setShowTicks(true);
  WetLevel.setOpaque(false);
  WetLevel.addEventHandler(this, "knob1_turn3");
  
  DryLevel = new GKnob(this, 339, 29, 83, 69, 0.8);
  DryLevel.setTurnRange(110, 70);
  DryLevel.setTurnMode(GKnob.CTRL_HORIZONTAL);
  DryLevel.setSensitivity(1);
  DryLevel.setShowArcOnly(false);
  DryLevel.setOverArcOnly(false);
  DryLevel.setIncludeOverBezel(false);
  DryLevel.setShowTrack(true);
  DryLevel.setLimits(0.5, 0.0, 1.0);
  DryLevel.setNbrTicks(5);
  DryLevel.setShowTicks(true);
  DryLevel.setOpaque(false);
  DryLevel.addEventHandler(this, "knob1_turn4");
  
  Width = new GKnob(this, 447, 27, 84, 70, 0.8);
  Width.setTurnRange(110, 70);
  Width.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Width.setSensitivity(1);
  Width.setShowArcOnly(false);
  Width.setOverArcOnly(false);
  Width.setIncludeOverBezel(false);
  Width.setShowTrack(true);
  Width.setLimits(0.5, 0.0, 1.0);
  Width.setNbrTicks(5);
  Width.setShowTicks(true);
  Width.setOpaque(false);
  Width.addEventHandler(this, "knob1_turn5");
  
  //we initially define another knob that we decide to not remove to let future implementations possible
  FreezeMode = new GKnob(this, 558, 28, 76, 68, 0.8);
  FreezeMode.setTurnRange(110, 70);
  FreezeMode.setTurnMode(GKnob.CTRL_HORIZONTAL);
  FreezeMode.setSensitivity(1);
  FreezeMode.setShowArcOnly(false);
  FreezeMode.setOverArcOnly(false);
  FreezeMode.setIncludeOverBezel(false);
  FreezeMode.setShowTrack(true);
  FreezeMode.setLimits(0.0, 0.0, 1.0);
  FreezeMode.setNbrTicks(5);
  FreezeMode.setShowTicks(true);
  FreezeMode.setOpaque(false);
  FreezeMode.setVisible(false);
  FreezeMode.addEventHandler(this, "knob1_turn6");
  
  //Phaser effect 
  panel5.addControl(RoomSize);
  panel5.addControl(Damping);
  panel5.addControl(WetLevel);
  panel5.addControl(DryLevel);
  panel5.addControl(Width);
  panel5.addControl(FreezeMode);
  
  panel6 = new GPanel(this, 21, 507, 540, 116, "Chorus");
  panel6.setCollapsible(false);
  panel6.setDraggable(false);
  panel6.setText("Chorus");
  panel6.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panel6.setOpaque(true);
  panel6.addEventHandler(this, "panel6_Click1");
  
  Rate = new GKnob(this, 20, 32, 77, 73, 0.8);
  Rate.setTurnRange(110, 70);
  Rate.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Rate.setSensitivity(1);
  Rate.setShowArcOnly(false);
  Rate.setOverArcOnly(false);
  Rate.setIncludeOverBezel(false);
  Rate.setShowTrack(true);
  Rate.setLimits(0.25, 0.0, 1.0);
  Rate.setNbrTicks(5);
  Rate.setShowTicks(true);
  Rate.setOpaque(false);
  Rate.addEventHandler(this, "knob1_turn7");
  
  Depth = new GKnob(this, 124, 31, 84, 75, 0.8);
  Depth.setTurnRange(110, 70);
  Depth.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Depth.setSensitivity(1);
  Depth.setShowArcOnly(false);
  Depth.setOverArcOnly(false);
  Depth.setIncludeOverBezel(false);
  Depth.setShowTrack(true);
  Depth.setLimits(0.5, 0.0, 1.0);
  Depth.setNbrTicks(5);
  Depth.setShowTicks(true);
  Depth.setOpaque(false);
  Depth.addEventHandler(this, "knob1_turn8");
  
  CentreDelay = new GKnob(this, 237, 30, 80, 75, 0.8);
  CentreDelay.setTurnRange(110, 70);
  CentreDelay.setTurnMode(GKnob.CTRL_HORIZONTAL);
  CentreDelay.setSensitivity(1);
  CentreDelay.setShowArcOnly(false);
  CentreDelay.setOverArcOnly(false);
  CentreDelay.setIncludeOverBezel(false);
  CentreDelay.setShowTrack(true);
  CentreDelay.setLimits(0.5, 0.0, 1.0);
  CentreDelay.setNbrTicks(5);
  CentreDelay.setShowTicks(true);
  CentreDelay.setOpaque(false);
  CentreDelay.addEventHandler(this, "knob1_turn9");
  
  Feedback = new GKnob(this, 342, 31, 82, 74, 0.8);
  Feedback.setTurnRange(110, 70);
  Feedback.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Feedback.setSensitivity(1);
  Feedback.setShowArcOnly(false);
  Feedback.setOverArcOnly(false);
  Feedback.setIncludeOverBezel(false);
  Feedback.setShowTrack(true);
  Feedback.setLimits(0.5, 0.0, 1.0);
  Feedback.setNbrTicks(5);
  Feedback.setShowTicks(true);
  Feedback.setOpaque(false);
  Feedback.addEventHandler(this, "knob1_turn10");
  
  Mix = new GKnob(this, 450, 32, 78, 71, 0.8);
  Mix.setTurnRange(110, 70);
  Mix.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Mix.setSensitivity(1);
  Mix.setShowArcOnly(false);
  Mix.setOverArcOnly(false);
  Mix.setIncludeOverBezel(false);
  Mix.setShowTrack(true);
  Mix.setLimits(0.5, 0.0, 1.0);
  Mix.setNbrTicks(5);
  Mix.setShowTicks(true);
  Mix.setOpaque(false);
  Mix.addEventHandler(this, "knob1_turn11");
  
  //Chorus effect
  panel6.addControl(Rate);
  panel6.addControl(Depth);
  panel6.addControl(CentreDelay);
  panel6.addControl(Feedback);
  panel6.addControl(Mix);
  
  panel7 = new GPanel(this, 707, 386, 313, 237, "Compressor");
  panel7.setCollapsible(false);
  panel7.setDraggable(false);
  panel7.setText("Compressor");
  panel7.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panel7.setOpaque(true);
  panel7.addEventHandler(this, "panel7_Click1");
  
  Threshold = new GKnob(this, 30, 38, 90, 84, 0.8);
  Threshold.setTurnRange(110, 70);
  Threshold.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Threshold.setSensitivity(1);
  Threshold.setShowArcOnly(false);
  Threshold.setOverArcOnly(false);
  Threshold.setIncludeOverBezel(false);
  Threshold.setShowTrack(true);
  Threshold.setLimits(0.5, 0.0, 1.0);
  Threshold.setNbrTicks(5);
  Threshold.setShowTicks(true);
  Threshold.setOpaque(false);
  Threshold.addEventHandler(this, "knob1_turn12");
  
  Ratio = new GKnob(this, 186, 39, 91, 84, 0.8);
  Ratio.setTurnRange(110, 70);
  Ratio.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Ratio.setSensitivity(1);
  Ratio.setShowArcOnly(false);
  Ratio.setOverArcOnly(false);
  Ratio.setIncludeOverBezel(false);
  Ratio.setShowTrack(true);
  Ratio.setLimits(0.2, 0.0, 1.0);
  Ratio.setNbrTicks(5);
  Ratio.setShowTicks(true);
  Ratio.setOpaque(false);
  Ratio.addEventHandler(this, "knob1_turn13");
  
  Attack = new GKnob(this, 33, 137, 90, 84, 0.8);
  Attack.setTurnRange(110, 70);
  Attack.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Attack.setSensitivity(1);
  Attack.setShowArcOnly(false);
  Attack.setOverArcOnly(false);
  Attack.setIncludeOverBezel(false);
  Attack.setShowTrack(true);
  Attack.setLimits(0.25, 0.0, 1.0);
  Attack.setNbrTicks(5);
  Attack.setShowTicks(true);
  Attack.setOpaque(false);
  Attack.addEventHandler(this, "knob1_turn14");
  
  Release = new GKnob(this, 190, 138, 93, 86, 0.8);
  Release.setTurnRange(110, 70);
  Release.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Release.setSensitivity(1);
  Release.setShowArcOnly(false);
  Release.setOverArcOnly(false);
  Release.setIncludeOverBezel(false);
  Release.setShowTrack(true);
  Release.setLimits(0.01, 0.0, 1.0);
  Release.setNbrTicks(5);
  Release.setShowTicks(true);
  Release.setOpaque(false);
  Release.addEventHandler(this, "knob1_turn15");
  
  //Compressor effect 
  panel7.addControl(Threshold);
  panel7.addControl(Ratio);
  panel7.addControl(Attack);
  panel7.addControl(Release);
  
  Pan = new GKnob(this, 584, 517, 103, 94, 0.8);
  Pan.setTurnRange(110, 70);
  Pan.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Pan.setSensitivity(1);
  Pan.setShowArcOnly(false);
  Pan.setOverArcOnly(false);
  Pan.setIncludeOverBezel(false);
  Pan.setShowTrack(true);
  Pan.setLimits(0.5, 0.0, 1.0);
  Pan.setShowTicks(true);
  Pan.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  Pan.setOpaque(false);
  Pan.addEventHandler(this, "knob1_turn16");
  
}

// Variable declarations 
GPanel Tastiera; 
GPanel panel5; 
GKnob RoomSize; 
GKnob Damping; 
GKnob WetLevel; 
GKnob DryLevel; 
GKnob Width; 
GKnob FreezeMode; 
GPanel panel6; 
GKnob Rate; 
GKnob Depth; 
GKnob CentreDelay; 
GKnob Feedback; 
GKnob Mix; 
GPanel panel7; 
GKnob Threshold; 
GKnob Ratio; 
GKnob Attack; 
GKnob Release; 
GKnob Pan; 
